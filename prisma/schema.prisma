datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String            @id @default(cuid())
  name                 String?
  email                String?           @unique
  emailVerified        DateTime?
  password             String?
  image                String?
  accounts             Account[]
  sessions             Session[]
  tracks               Track[]
  critiques            Critique[]
  coins                Int               @default(100)
  coinTransactions     CoinTransaction[]
  role                 String?
  totalCritiquesGiven  Int               @default(0)
  totalRatingsReceived Int               @default(0)
  sumOfRatingsReceived Int               @default(0)
}

model CoinTransaction {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  amount    Int
  type      String // "EARN" or "SPEND"
  reason    String
  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Track {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  description String?
  url         String
  genre       String?
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  critiques   Critique[]
  requested   Boolean    @default(false)
  requestedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Critique {
  id                String    @id @default(cuid())
  trackId           String
  userId            String
  mixingQuality     Int?
  tonalBalance      Int?
  masteringLoudness Int?
  soundDesign       Int?
  arrangement       Int?
  technicalSummary  String?
  emotionalResponse String
  imagery           String
  standoutElements  String
  genreFit          String
  overallImpression String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  track             Track     @relation(fields: [trackId], references: [id])
  user              User      @relation(fields: [userId], references: [id])
  rating            Int?
  ratedAt           DateTime?
  ratedBy           String?
}
